Binary files linux-5.4.238.org/arch/arm64/boot/Image and linux-5.4.238/arch/arm64/boot/Image differ
diff -urN linux-5.4.238.org/drivers/net/phy/realtek_switch/rtl8370mb_dbg.c linux-5.4.238/drivers/net/phy/realtek_switch/rtl8370mb_dbg.c
--- linux-5.4.238.org/drivers/net/phy/realtek_switch/rtl8370mb_dbg.c	2024-06-29 10:55:35.110333461 +0900
+++ linux-5.4.238/drivers/net/phy/realtek_switch/rtl8370mb_dbg.c	2024-07-13 21:01:41.925376761 +0900
@@ -3,6 +3,7 @@
 #include <linux/seq_file.h>
 #include <linux/proc_fs.h>
 #include <linux/u64_stats_sync.h>
+#include <linux/jiffies.h>
 
 #include  "rtk_switch.h"
 #include  "port.h"
@@ -17,16 +18,21 @@
 static struct proc_dir_entry *proc_reg_dir;
 static struct proc_dir_entry *proc_esw_cnt;
 static struct proc_dir_entry *proc_port_cnt;
+static struct proc_dir_entry *proc_link_cnt;
 static struct proc_dir_entry *proc_vlan_cnt;
+static struct proc_dir_entry *proc_mac;
 static struct proc_dir_entry *proc_mac_tbl;
 static struct proc_dir_entry *proc_reg;
 static struct proc_dir_entry *proc_phyreg;
 static struct proc_dir_entry *proc_mirror;
 static struct proc_dir_entry *proc_igmp;
 
+#define	SW_ACCESS_INTERVAL	(2 * HZ)
 #define PROCREG_ESW_CNT		"esw_cnt"
 #define PROCREG_PORT		"port"
+#define PROCREG_LINK		"link"
 #define PROCREG_VLAN		"vlan"
+#define PROCREG_MAC		"mac"
 #define PROCREG_MAC_TBL		"mac_tbl"
 #define PROCREG_REG			"reg"
 #define PROCREG_PHYREG		"phyreg"
@@ -154,6 +160,64 @@
 	return 0;
 }
 
+static rtk_uint64 privious_link_access_time = 0;
+static char PRIVIOUS_LINK_STATUS[RTK_SW_UTP_PORT_NUM] = {0, };
+
+static int link_read_internal(void)
+{
+	int i;
+	rtk_uint64 now;
+	rtk_port_mac_ability_t portStatus;
+
+	now = get_jiffies_64();
+
+	/* Keep guard time over 2 seconds */
+	if (now < privious_link_access_time + SW_ACCESS_INTERVAL) {
+		return 0;
+	}
+
+	privious_link_access_time = now;
+
+	for(i = 0; i < RTK_SW_UTP_PORT_NUM; i++) {
+		memset(&portStatus, 0x00, sizeof(rtk_port_mac_ability_t));
+		rtk_port_macStatus_get(i, &portStatus);
+		PRIVIOUS_LINK_STATUS[i] = portStatus.link;
+	}
+
+	return 0;
+}
+
+static int link_read(struct seq_file *seq, void *v)
+{
+	int i;
+	rtk_uint64 now;
+	rtk_port_mac_ability_t portStatus;
+
+	now = get_jiffies_64();
+
+	/* Keep guard time over 2 seconds */
+	if (now < privious_link_access_time + SW_ACCESS_INTERVAL) {
+		for(i = 0; i < RTK_SW_UTP_PORT_NUM; i++) {
+			seq_printf(seq, "%1d", PRIVIOUS_LINK_STATUS[i]);
+		}
+		seq_printf(seq, "\n");
+
+		return 0;
+	}
+
+	privious_link_access_time = now;
+
+	for(i = 0; i < RTK_SW_UTP_PORT_NUM; i++) {
+		memset(&portStatus, 0x00, sizeof(rtk_port_mac_ability_t));
+		rtk_port_macStatus_get(i, &portStatus);
+		seq_printf(seq, "%1d", portStatus.link);
+		PRIVIOUS_LINK_STATUS[i] = portStatus.link;
+	}
+	seq_printf(seq, "\n");
+
+	return 0;
+}
+
 static int vlan_read(struct seq_file *seq, void *v)
 {
 	int i;
@@ -200,12 +264,13 @@
 
 	seq_printf(seq, "|===================================|\n");
 	seq_printf(seq, "| VLAN |     List    |  PVID  | Pri |\n");
+	seq_printf(seq, "|===================================|\n");
 	for(i = 0; i < RTK_MAX_PORTS; i++) {
 		memset(&vlan, 0x00, sizeof(rtk_vlan_cfg_t));
 		rtk_vlan_get(i, &vlan);
 		rtk_vlan_portPvid_get(i, &pvid, &pri);
 
-		seq_printf(seq, "   %02d  |  0x%08X |  %4d  |  %1d  |\n",
+		seq_printf(seq, "|  %02d  |  0x%08X |  %4d  |  %1d  |\n",
 				i, vlan.mbr.bits[0], pvid, pri);
 	}
 	seq_printf(seq, "|===================================|\n");
@@ -213,6 +278,65 @@
 	return 0;
 }
 
+
+static rtk_uint64 privious_mac_access_time = 0;
+static char STORE_MAC_ADDR[RTK_SW_UTP_PORT_NUM][RTK_MAC_ADDR_LEN] = {{0, 0}, };
+
+static int mac_read(struct seq_file *seq, void *v)
+{
+	int i = 0;
+	rtk_uint64 now;
+	rtk_uint32 address = 0;
+	rtk_l2_ucastAddr_t l2_data;
+
+	now = get_jiffies_64();
+
+	if (now < privious_mac_access_time + SW_ACCESS_INTERVAL) {
+		goto noelapsed;
+	}
+
+	link_read_internal();
+
+	while(1) {
+		if(rtk_l2_addr_next_get(READMETHOD_NEXT_L2UC, 0, &address, &l2_data) != RT_ERR_OK) {
+			break;
+		}
+		address++;
+
+		if((l2_data.port >= 0) && (l2_data.port < RTK_SW_UTP_PORT_NUM)) {
+			STORE_MAC_ADDR[l2_data.port][0] = l2_data.mac.octet[0];
+			STORE_MAC_ADDR[l2_data.port][1] = l2_data.mac.octet[1];
+			STORE_MAC_ADDR[l2_data.port][2] = l2_data.mac.octet[2];
+			STORE_MAC_ADDR[l2_data.port][3] = l2_data.mac.octet[3];
+			STORE_MAC_ADDR[l2_data.port][4] = l2_data.mac.octet[4];
+			STORE_MAC_ADDR[l2_data.port][5] = l2_data.mac.octet[5];
+		}
+	}
+
+noelapsed:
+	privious_mac_access_time = now;
+
+	for(i = 0; i < RTK_SW_UTP_PORT_NUM; i++) {
+		if(PRIVIOUS_LINK_STATUS[i]) {
+			seq_printf(seq, "%1d  %02x:%02x:%02x:%02x:%02x:%02x\n",
+				i,
+				STORE_MAC_ADDR[i][0], STORE_MAC_ADDR[i][1],
+				STORE_MAC_ADDR[i][2], STORE_MAC_ADDR[i][3],
+				STORE_MAC_ADDR[i][4], STORE_MAC_ADDR[i][5]);
+		}
+		else {
+			memset(STORE_MAC_ADDR[i], 0x00, RTK_MAC_ADDR_LEN);
+			seq_printf(seq, "%1d  %02x:%02x:%02x:%02x:%02x:%02x\n",
+				i,
+				STORE_MAC_ADDR[i][0], STORE_MAC_ADDR[i][1],
+				STORE_MAC_ADDR[i][2], STORE_MAC_ADDR[i][3],
+				STORE_MAC_ADDR[i][4], STORE_MAC_ADDR[i][5]);
+		}
+	}
+
+	return 0;
+}
+
 static int mac_tbl_read(struct seq_file *seq, void *v)
 {
 	rtk_uint32 i;
@@ -241,7 +365,7 @@
 				else
 					seq_printf(seq, "-");
 
-			seq_printf(seq, "      %2d", l2_data.fid);
+			seq_printf(seq, "  %4d", l2_data.fid);
 			seq_printf(seq, "  %4d", l2_data.cvid);
 			seq_printf(seq, "  %02x%02x%02x%02x%02x%02x\n", l2_data.mac.octet[0],
 			l2_data.mac.octet[1], l2_data.mac.octet[2], l2_data.mac.octet[3],
@@ -269,12 +393,13 @@
 	address = 0;
 	seq_printf(seq, "|===========================================|\n");
 	seq_printf(seq, "| Port | VLAN | INDEX |     MAC Address     |\n");
+	seq_printf(seq, "|===========================================|\n");
 	while(1) {
 		if(rtk_l2_addr_next_get(READMETHOD_NEXT_L2UC, 0, &address, &l2_data) != RT_ERR_OK) {
 			break;
 		}
-		seq_printf(seq, "|   %02d | %04d | %04d | %02X:%02X:%02X:%02X:%02X:%02X |\n",
-				l2_data.port, l2_data.cvid, l2_data.efid, address,
+		seq_printf(seq, "|   %02d | %04d |  %04d |  %02X:%02X:%02X:%02X:%02X:%02X  |\n",
+				l2_data.port, l2_data.cvid, l2_data.efid,
 				l2_data.mac.octet[0], l2_data.mac.octet[1],
 				l2_data.mac.octet[2], l2_data.mac.octet[3],
 				l2_data.mac.octet[4], l2_data.mac.octet[5]);
@@ -580,11 +705,21 @@
 	return single_open(file, port_read, 0);
 }
 
+static int switch_link_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, link_read, 0);
+}
+
 static int switch_vlan_open(struct inode *inode, struct file *file)
 {
 	return single_open(file, vlan_read, 0);
 }
 
+static int mac_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, mac_read, 0);
+}
+
 static int mac_tbl_open(struct inode *inode, struct file *file)
 {
 	return single_open(file, mac_tbl_read, 0);
@@ -627,6 +762,14 @@
 	.release = single_release
 };
 
+static const struct file_operations switch_link_fops = {
+	.owner = THIS_MODULE,
+	.open = switch_link_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release
+};
+
 static const struct file_operations switch_vlan_fops = {
 	.owner = THIS_MODULE,
 	.open = switch_vlan_open,
@@ -635,6 +778,15 @@
 	.release = single_release
 };
 
+static const struct file_operations mac_fops = {
+        .owner = THIS_MODULE,
+        .open = mac_open,
+        .read = seq_read,
+        .llseek = seq_lseek,
+        .write = mac_tbl_write,
+        .release = single_release
+};
+
 static const struct file_operations mac_tbl_fops = {
         .owner = THIS_MODULE,
         .open = mac_tbl_open,
@@ -698,12 +850,24 @@
 	if (!proc_port_cnt)
 		pr_err("!! FAIL to create %s PROC !!\n", PROCREG_PORT);
 
+	proc_link_cnt =
+	proc_create(PROCREG_LINK, 0, proc_reg_dir, &switch_link_fops);
+
+	if (!proc_link_cnt)
+		pr_err("!! FAIL to create %s PROC !!\n", PROCREG_LINK);
+
 	proc_vlan_cnt =
 	proc_create(PROCREG_VLAN, 0, proc_reg_dir, &switch_vlan_fops);
 
 	if (!proc_vlan_cnt)
 		pr_err("!! FAIL to create %s PROC !!\n", PROCREG_VLAN);
 
+	proc_mac =
+	proc_create(PROCREG_MAC, 0, proc_reg_dir, &mac_fops);
+
+	if (!proc_mac)
+		pr_err("!! FAIL to create %s PROC !!\n", PROCREG_MAC);
+
 	proc_mac_tbl =
 	proc_create(PROCREG_MAC_TBL, 0, proc_reg_dir, &mac_tbl_fops);
 
