#!/usr/bin/lua
require "uci"

-- HTTP 헤더 출력 (간단한 텍스트 응답)
print("Content-type: text/plain; charset=UTF-8\n\n")

-- 쿼리 파라미터 파싱 함수
local function parse_query_string()
    local qs = os.getenv("QUERY_STRING") or ""
    local params = {}
    for k, v in qs:gmatch("([^&=?]+)=([^&=?]+)") do
        params[k] = v
    end
    return params
end

-- MAC 주소 유효성 검사
local function is_valid_mac(mac)
    return mac and mac:match("^%x%x:%x%x:%x%x:%x%x:%x%x:%x%x$")
end

-- MAC 주소를 공백으로 구분된 바이트로 변환
local function mac_to_bytes(mac)
    local parts = {}
    for part in mac:gmatch("%x%x") do
        table.insert(parts, part)
    end
    return table.concat(parts, " ")
end

-- 쿼리 파라미터 가져오기
local params = parse_query_string()
local interface = params["interface"]
local new_mac = params["mac"]

-- MAC 주소 처리
if interface and new_mac then
    if is_valid_mac(new_mac) then
        local uci = uci.cursor()
        if interface == "lan" then
            uci:set("network", "@device[0]", "macaddr", new_mac)
            uci:commit("network")
            -- Factory flash에 lan MAC 주소 저장
            local mac_bytes = mac_to_bytes(new_mac)
            os.execute("/sbin/mtk_factory_rw.sh -w lan " .. mac_bytes)
            os.execute("/etc/init.d/network restart")
            print("LAN (eth0) MAC address has been successfully changed: " .. new_mac)
        elseif interface == "wan" then
            uci:set("network", "@device[1]", "macaddr", new_mac)
            uci:commit("network")
            -- Factory flash에 wan MAC 주소 저장
            local mac_bytes = mac_to_bytes(new_mac)
            os.execute("/sbin/mtk_factory_rw.sh -w wan " .. mac_bytes)
            os.execute("/etc/init.d/network restart")
            print("WAN (eth1) MAC address has been successfully changed: " .. new_mac)
        else
            print("Unknown interface: " .. tostring(interface))
        end
    else
        print("Invalid MAC address format.")
    end
else
    print("Please provide both interface and mac parameters.")
end

