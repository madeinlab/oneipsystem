<!DOCTYPE html>
<html lang="<%=luci.i18n.context.lang%>">
<head>
    <meta charset="utf-8">
    <title><%:Change Password%> - OneIPSystem</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" media="screen" href="<%=media%>/cascade.css">
    <style>
        body { 
            background: #fff;
            margin: 0;
            padding: 20px;
        }
        .change-password-container {
            max-width: 600px;
            margin: 40px auto;
            padding: 20px;
        }
        .form-field {
            margin-bottom: 15px;
        }
        .form-field label {
            display: block;
            margin-bottom: 5px;
        }
        .form-field input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .button-container {
            text-align: right;
            margin-top: 20px;
        }
        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
        }
        .btn-primary {
            background: #00A3E1;
            color: white;
            border: none;
        }
        .btn-secondary {
            background: #f0f0f0;
            border: 1px solid #ddd;
        }
        .error-message {
            color: #cc0000;
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #f88;
            border-radius: 4px;
            background: #fee;
            display: none;
        }
        .requirements {
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            display: none;
            background: #f9f9f9;
            font-size: 13px;
        }
        .requirement {
            margin: 5px 0;
            line-height: 1.4;
        }
        .requirement.valid { color: green; }
        .requirement.invalid { color: red; }
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0,0,0,.3);
            border-radius: 50%;
            border-top-color: #000;
            animation: spin 1s ease-in-out infinite;
            -webkit-animation: spin 1s ease-in-out infinite;
            vertical-align: middle;
            margin-left: 8px;
        }

        @keyframes spin {
            to { -webkit-transform: rotate(360deg); }
        }
        @-webkit-keyframes spin {
            to { -webkit-transform: rotate(360deg); }
        }
    </style>
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function() {
            var currentPasswordInput = document.querySelector('input[name="current_password"]');
            if (currentPasswordInput) {
                currentPasswordInput.focus();

                // 마우스 이벤트 생성
                try {
                    var rect = currentPasswordInput.getBoundingClientRect();
                    if (rect) {
                        var evt = document.createEvent('MouseEvents');
                        evt.initMouseEvent(
                            'mouseover',
                            true,
                            true,
                            window,
                            0,
                            0, 0,    // screenX, screenY
                            rect.left + rect.width/2, rect.top + rect.height/2, // clientX, clientY
                            false, false, false, false,
                            0,
                            null
                        );
                        currentPasswordInput.dispatchEvent(evt);
                    }
                } catch(e) {
                    console.log('Mouse event creation failed:', e);
                }
            }
        });
    </script>
    <script src="<%=resource%>/jsencrypt.min.js"></script>
</head>
<body>
    <%
    local fs  = require "nixio.fs"
    local pubkey = fs.readfile("/etc/ssl/public.pem")
    
    -- UCI 설정 읽기
    local uci = require "luci.model.uci".cursor()
    local min_length = uci:get('admin_manage', 'password_rule', 'min_length') or "9"
    local max_length = uci:get('admin_manage', 'password_rule', 'max_length') or "32"
    %>
    <div class="change-password-container">
        <h2><%:Change Password%></h2>
        
        <% if success then %>
            <div class="alert-message success">
                <h4><%:Password changed successfully!%></h4>
                <p><%:Redirecting to login page...%><i class="loading"></i></p>
            </div>
            <script>
                setTimeout(function() {
                    fetch('<%=url("admin/logout")%>', {
                        method: 'POST',
                        credentials: 'include'
                    })
                    .finally(function() {
                        window.location.href = '<%=url("admin/login")%>';
                    });
                }, 1000);
            </script>
        <% else %>
            <div id="error-message" class="error-message">
                <% if error then %>
                    <%=message%>
                <% end %>
            </div>

            <form id="change-password-form" method="post" action="<%=url('admin/changepassword')%>" onsubmit="return validateForm()" autocomplete="off">
                <div class="form-field">
                    <label><%:Current Password%></label>
                    <input type="password" name="current_password" id="current_password" required autocomplete="off">
                </div>

                <div class="form-field">
                    <label><%:New Password%></label>
                    <input type="password" name="new_password" id="new_password"
                           oninput="checkPassword(this.value)" required autocomplete="off">
                    <div id="requirements" class="requirements">
                        <div class="requirement" id="length">
                            <span>✗</span> Length between 9 and 32 characters
                        </div>
                        <div class="requirement" id="uppercase">
                            <span>✗</span> <%:Include uppercase letters%>
                        </div>
                        <div class="requirement" id="lowercase">
                            <span>✗</span> <%:Include lowercase letters%>
                        </div>
                        <div class="requirement" id="number">
                            <span>✗</span> <%:Include numbers%>
                        </div>
                        <div class="requirement" id="special">
                            <span>✗</span> <%:Include special characters (!@#$%^&*())%>
                        </div>
                        <div class="requirement" id="sequential" style="display:none;">
                            <span>✗</span> <%:Do not include 3 or more sequential or identical characters%>
                        </div>                        
                    </div>
                </div>

                <div class="form-field">
                    <label><%:Confirm Password%></label>
                    <input type="password" name="confirm_password" id="confirm_password" required autocomplete="off">
                </div>

                <div class="button-container">
                    <input type="reset" class="btn btn-secondary" value="<%:Reset%>" onclick="resetForm()">
                    <input type="submit" class="btn btn-primary" value="<%:Save%>">
                </div>
            </form>

            <script type="text/javascript">
                var errorMessages = {
                    passwordMismatch: '<%=luci.i18n.translate("Passwords do not match")%>',
                    requirementsFailed: '<%=luci.i18n.translate("Password does not meet requirements")%>',
                    currentRequired: '<%=luci.i18n.translate("Current password is required")%>'
                };

                function showError(message) {
                    var errorDiv = document.getElementById('error-message');
                    errorDiv.textContent = message;
                    errorDiv.style.display = 'block';
                }

                function validateForm() {
                    var newPassword = document.getElementById('new_password').value;
                    var confirmPassword = document.getElementById('confirm_password').value;
                    var currentPassword = document.getElementById('current_password').value;

                    if (!currentPassword) {
                        showError(errorMessages.currentRequired);
                        return false;
                    }

                    if (!checkPassword(newPassword)) {
                        showError(errorMessages.requirementsFailed);
                        return false;
                    }

                    if (newPassword !== confirmPassword) {
                        showError(errorMessages.passwordMismatch);
                        return false;
                    }

                    document.getElementById('error-message').style.display = 'none';
                    document.querySelector('.btn-primary').disabled = true;
                    document.querySelector('.btn-primary').value = '<%:Saving...%>';

                    return true;
                }

                // 페이지 로드 시 에러 메시지 표시 상태 설정
                window.addEventListener('DOMContentLoaded', function() {
                    var errorDiv = document.getElementById('error-message');
                    errorDiv.style.display = errorDiv.textContent.trim() ? 'block' : 'none';
                });

                document.addEventListener("DOMContentLoaded", function () {
                    var form = document.getElementById("change-password-form");
                    if (!form) return;

                    form.addEventListener("submit", function(event) {
                        // 기존 validateForm()이 false면 암호화하지 않음
                        if (typeof validateForm === "function" && !validateForm()) {
                            event.preventDefault();
                            return false;
                        }
                        var pubkey = `<%=pubkey%>`;
                        if (!pubkey || pubkey.trim() === "") {
                            alert("서버 공개키가 없습니다. 관리자에게 문의하세요.");
                            event.preventDefault();
                            return false;
                        }
                        var encrypt = new JSEncrypt();
                        encrypt.setPublicKey(pubkey);
                        // 암호화 대상 input
                        var current = document.getElementById('current_password');
                        var newpw = document.getElementById('new_password');
                        var confirm = document.getElementById('confirm_password');
                        // 각각 암호화
                        if (current && current.value) {
                            var enc = encrypt.encrypt(current.value);
                            current.value = enc;
                        }
                        if (newpw && newpw.value) {
                            var enc = encrypt.encrypt(newpw.value);
                            newpw.value = enc;
                        }
                        if (confirm && confirm.value) {
                            var enc = encrypt.encrypt(confirm.value);
                            confirm.value = enc;
                        }
                    });
                });
            </script>
        <% end %>
    </div>

    <% 
        local i18n = require "luci.i18n"
        local tr_length_rule = i18n.translate('Length between %d and %d characters')
        local tr_not_meet = i18n.translate('Password does not meet all requirements')
        local tr_not_match = i18n.translate('Passwords do not match')
    %>

    <script>
        // 패스워드 규칙 정의
        const passwordRules = {
            minLength: <%= min_length %>,
            maxLength: <%= max_length %>,
            checkSequential: '0',
            checkSequentialIgnoreCase: '0',
            checkSequentialSpecial: '0'
        };

        // 페이지 로드 시 규칙 적용
        document.addEventListener('DOMContentLoaded', function() {
            updateRequirementsText();
        });

        function updateRequirementsText() {
            const lengthReq = document.getElementById('length');
            if (lengthReq) {
                const lengthRuleMessage = `<%= tr_length_rule %>`;
                lengthReq.innerHTML = `<span>✗</span> ${lengthRuleMessage.replace('%d', passwordRules.minLength).replace('%d', passwordRules.maxLength)}`;
            }

            const sequentialReq = document.getElementById("sequential");
            if (passwordRules.checkSequential === '1') {
                sequentialReq.style.display = 'block';
            } else {
                sequentialReq.style.display = 'none';
            }
        }

        function checkPassword(value) {
            const requirements = document.getElementById('requirements');
            requirements.style.display = 'block';

            const checks = {
                length: new RegExp(`^.{${passwordRules.minLength},${passwordRules.maxLength}}$`),
                uppercase: /[A-Z]/,
                lowercase: /[a-z]/,
                number: /[0-9]/,
                special: /[!@#$%^&*()]/
            };

            let allValid = true;
            for (const [key, regex] of Object.entries(checks)) {
                const element = document.getElementById(key);
                const isValid = regex.test(value);
                element.classList.toggle('valid', isValid);
                element.classList.toggle('invalid', !isValid);
                element.querySelector('span').textContent = isValid ? '✓' : '✗';
                allValid = allValid && isValid;
            }

            if (passwordRules.checkSequential == '1') {
                const element = document.getElementById('sequential');
                const isValid = !(hasSequentialCharacters(value, passwordRules.checkSequentialIgnoreCase, passwordRules.checkSequentialSpecial))
                element.classList.toggle('valid', isValid);
                element.classList.toggle('invalid', !isValid);
                element.querySelector('span').textContent = isValid ? '✓' : '✗';
                allValid = allValid && isValid;
            }

            return allValid;
        }

        function resetForm() {
            document.getElementById('requirements').style.display = 'none';
            const requirements = document.querySelectorAll('.requirement');
            requirements.forEach(req => {
                req.classList.remove('valid', 'invalid');
                req.querySelector('span').textContent = '✗';
            });
        }

        function hasSequentialCharacters(password, ignoreCase, checkSpecialChars) {

            // 패스워드 길이가 0일 때 'x'로 표시 
            if (password.length === 0) 
                return true

            const specialChars = "!@#$%^&*()";
                
            const normalized = (ignoreCase == '1') ? password.toLowerCase() // 대소문자 구분 안함. 
                                                : password // 대소문자 구분.
            
            for (let i = 0; i < normalized.length - 2; i++) {
                let char1 = normalized[i];
                let char2 = normalized[i + 1];
                let char3 = normalized[i + 2];

                // ASCII 코드 기준으로 연속된 문자 검사 (예: abc, 123)
                if (char2.charCodeAt(0) === char1.charCodeAt(0) + 1 &&
                    char3.charCodeAt(0) === char2.charCodeAt(0) + 1) {
                    return true; // 연속된 3자리 문자 확인
                }

                // 동일한 문자 3개 이상 반복 검사 (예: aaa, 111, $$$)
                if (char1 === char2 && char2 === char3) {
                    return true; // 동일 문자 3개 이상 반복
                }

                if (checkSpecialChars == '1') {
                    // 특수문자 연속성 체크 (예: !@#, #$%)
                    if (specialChars.includes(char1) &&
                        specialChars.includes(char2) &&
                        specialChars.includes(char3)) {
                        let idx1 = specialChars.indexOf(char1);
                        let idx2 = specialChars.indexOf(char2);
                        let idx3 = specialChars.indexOf(char3);

                        if (idx2 === idx1 + 1 && idx3 === idx2 + 1) {
                            return true; // 연속된 특수문자 확인
                        }
                    }

                    // 동일한 특수문자 3개 이상 반복 검사 (예: !!!, @@@)
                    if (char1 === char2 && char2 === char3 && specialChars.includes(char1)) {
                        return true; // 동일 특수문자 3개 이상 반복
                    }
                }
            }
            
            return false; // 연속된 문자 없음
        }

        // Show requirements on focus
        document.getElementById('new_password').addEventListener('focus', function() {
            document.getElementById('requirements').style.display = 'block';
        });

        function handlePasswordChange() {
            // ... 기존 패스워드 변경 로직 ...

            fetch('/cgi-bin/luci/admin/system/password', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // 1. Show success message
                    document.getElementById('result').innerHTML = `
                        <div class="alert-message success">
                            <h4><%:Password changed successfully!%></h4>
                            <p><%:Redirecting to login page...%><i class="loading"></i></p>
                        </div>`;

                    // 2. Wait for 1 second before session termination and redirect
                    setTimeout(() => {
                        // 3. Terminate all sessions
                        fetch('/cgi-bin/luci/admin/logout', {
                            method: 'POST'
                        })
                        .finally(() => {
                            // 4. Redirect to login page
                            window.location.href = '/cgi-bin/luci/admin/login';
                        });
                    }, 1000);
                } else {
                    document.getElementById('result').innerHTML = `
                        <div class="alert-message error">
                            <h4>Password Change Failed</h4>
                            <p>${data.message || 'An error occurred while changing the password.'}</p>
                        </div>`;
                }
            });
        }
    </script>
</body>
</html>
